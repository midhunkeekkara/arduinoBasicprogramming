# pythonbegineer
#msmidhun
1. Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5,
between 2000 and 3200 (both included).
solution:
if __name__ == '__main__':
	for x in range(2000,3201):
		if(x%7==0):
			if(x%5!=0):
				print(x)
				

2.Write a program which can compute the factorial of a given numbers.

if __name__ == '__main__':
	fact=1
	n=input("Enter number  ")
	n=int(n)
	if(n>0):
		while(n>0):
			fact=fact*n
			n=n-1
		print("Factorial of given number is ",fact)
	else:
		print("Enter valid number")

3.With a given integral number n, write a program to generate a dictionary that contains (i, i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.

if __name__ == '__main__':
	r=int(input("Enter range"))
	d={}
	for x in range(1,r):
		 d[x]=x*x
	print(d)

4.Write a program which accepts a sequence of comma-separated numbers from console and generate a list and a
 tuple which contains every number.
Suppose the following input is supplied to the program:
34,67,55,33,12,98
Then, the output should be:
['34', '67', '55', '33', '12', '98']
('34', '67', '55', '33', '12', '98') 
if __name__ == '__main__':
	num=input("Enter numbers by comma comma-separated")
	num1=()
	num2=[]
	num2=num.split(",")
	num1=tuple(num2)
	print(num2)
	print(num1)
  
5. Define a class which has at least two methods:
getString: to get a string from console input
printString: to print the string in upper case.
Also please include simple test function to test the class methods.

Hints:
Use __init__ method to construct some parameters

Class is a set or category of things having some property or attribute in common and differentiated from others by kind,
 type, or quality.

In technical terms we can say that class is a blue print for individual objects with exact behaviour.

Object :

object is one of instances of the class. which can perform the functionalities which are defined in the class.

self :
self represents the instance of the class. By using the "self" keyword we can access the attributes and methods of 
the class in python.

__init__ :

"__init__" is a reseved method in python classes. It is known as a constructor in object oriented concepts.
 This method called when an object is created from the class and it allow the class to initialize the attributes of a class. '''

class inputoutstring(object):
    def __init__(self):
        self.s = ""

    def getstring(self):
        self.s = input()

    def printstring(self):
        print (self.s.upper())

strObj = inputoutstring()
strObj.getstring()
strObj.printstring()

6.Write a program that calculates and prints the value according to the given formula:
Q = Square root of [(2 * C * D)/H]
Following are the fixed values of C and H:
C is 50. H is 30.
D is the variable whose values should be input to your program in a comma-separated sequence.
Example
Let us assume the following comma separated input sequence is given to the program:
100,150,180
The output of the program should be:
18,22,24

import math
if __name__ == '__main__':
    c=50
    h=30
    t=[]
    y=[]
    u=0
    x=input("enter")
    y=x.split(",")
    for q in y:
        t.append(str(round(math.sqrt(2*c*int(q)/h))))     
    print(t)              
    
7.Write a program which takes 2 digits, X,Y as input and generates a 2-dimensional array. The element value in the i-th row and j-th column of the array should be i*j.
Note: i=0,1.., X-1; j=0,1,¡­Y-1.
Example
Suppose the following inputs are given to the program:
3,5
Then, the output of the program should be:
[[0, 0, 0, 0, 0], [0, 1, 2, 3, 4], [0, 2, 4, 6, 8]] 

if __name__ == '__main__':
    r=input("Enter the number of rows,column")
    c=[]
    v=[]
    c=r.split(",")
    for x in c:
        v.append(int(x))
    mult = [[0 for col in range(v[1])] for row in range(v[0])] #multilist creation
    for x in range(0,v[0]):
        for y in range(0,v[1]):
            mult[x][y]=x*y
    print(mult)
    
8.Write a program that accepts a comma separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically.
Suppose the following input is supplied to the program:
without,hello,bag,world
Then, the output should be:
bag,hello,without,world

if __name__ == '__main__':
    r=[x for x in input().split(",")]
    r.sort()
    str1=','.join(r)
    print(str1)
    
9.

   
